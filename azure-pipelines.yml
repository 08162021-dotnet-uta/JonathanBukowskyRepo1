# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  pathToP1: projects/project_1/Project1.StoreApplication
  pathToP1Sln: $(pathToP1)/Project1.StoreApplication.sln
  buildConfiguration: 'Dev'
  p1Package: $(pathToP1)/PipelineBuild

trigger:
  branches:
    include:
      #- main
      - ssh_main
  paths:
    include:
      - $(pathToP1)/*
  

pool:
  vmImage: windows-latest

stages:
  - stage: Build
    jobs:
      - job: buildJob
        steps:
          - task: UseDotNet@2
            inputs:
              version: '5.0.x'
#          - task: DotNetCoreCLI@2
#            displayName: 'install .NET 5 sdk'
#            inputs:
#              packageType: 'sdk'
#              version: '5.0.x'
          - task: NuGetToolInstaller@1
          - task: NuGetCommand@2
            inputs:
              command: restore
              restoreSolution: '$(pathToSln)'
          - task: VSBuild@1
            inputs:
              solution: '$(pathToP1Sln)'
              msbuildArgs: '/t:Restore /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(p1Package)"'
            #vsVersion: 'latest' # Optional. Options: latest, 16.0, 15.0, 14.0, 12.0, 11.0
            #msbuildArgs: # Optional
            #platform: # Optional
            #configuration: # Optional
            #clean: false # Optional
            #maximumCpuCount: false # Optional
            #restoreNugetPackages: false # Optional
            #msbuildArchitecture: 'x86' # Optional. Options: x86, x64
            #logProjectEvents: true # Optional
            #createLogFile: false # Optional
            #logFileVerbosity: 'normal' # Optional. Options: quiet, minimal, normal, detailed, diagnostic
#      - job: SonarCloud
#        steps:
  - stage: Publish
    jobs:
      - job: publish
        steps:
          - task: UseDotNet@2
            inputs:
              version: '5.0.x'
          - task: DotNetCoreCLI@2
            displayName: 'Publish p1'
            inputs:
              command: 'publish'
              publishWebProjects: true
              projects: $(pathToSln)
              zipAfterPublish: true
          #- task:
#          - task: AzureRmWebAppDeployment@4
#            displayName: 'Deploy to Azure'
#            inputs:
#              azureSubscription: 'Publish to P1'
#              appType: 'webApp'
#              WebAppName: 'Project1.StoreApplication'
#              #deployToSlotOrASE: true
#              #ResourceGroupName: ''
#              #SlotName: 'production'
#              packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'
          - script: 'ls -R "$(System.DefaultWorkingDirectory)"'
            displayName: 'Show working files'
#          - task: Bash@3
#            displayName: 'Show staged files'
#            inputs:
#              script: 'ls -R $(build.artifactstagingdirectory)'
          - task: DownloadSecureFile@1
            name: PubXML
            displayName: 'Download .pubxml for Deployment'
            inputs:
             secureFile: 'Project1-StoreApplication - Web Deploy.pubxml'
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'PublishProfile'
              #PublishProfilePath: '$(System.DefaultWorkingDirectory)/**/*.pubxml'
              PublishProfilePath: '$(PubXML.secureFilePath)'
              PublishProfilePassword: $(PublishPWD)
              packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'
